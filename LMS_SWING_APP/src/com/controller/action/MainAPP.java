/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.controller.action;

import com.controller.common.ResAccessMethod;
import com.controller.common.ResAccessUrl;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author THUSHARA
 */
public class MainAPP extends javax.swing.JFrame {

    private JSONObject obj;
    private int userID = 0;
    private int bookID = 0;

    /**
     * Creates new form MainAPP
     */
    public MainAPP() {
        initComponents();
    }

    public MainAPP(JSONObject obj) {
        this();
        this.obj = obj;
        initializedData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbl_userrole = new javax.swing.JLabel();
        lbl_userdisplayname = new javax.swing.JLabel();
        lbl_system_date = new javax.swing.JLabel();
        lbl_system_time = new javax.swing.JLabel();
        btn_type = new javax.swing.JButton();
        btn_user = new javax.swing.JButton();
        btn_book = new javax.swing.JButton();
        btn_home = new javax.swing.JButton();
        btn_user_logout = new javax.swing.JButton();
        p_main = new javax.swing.JPanel();
        p_home = new javax.swing.JPanel();
        lbl_home_systemdate = new javax.swing.JLabel();
        lbl_home_systemtime = new javax.swing.JLabel();
        p_book = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tb_book = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        tf_book_description = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tf_book_isbn = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tf_book_printed_year = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tf_book_name = new javax.swing.JTextField();
        lbl_book_author = new javax.swing.JLabel();
        lbl_book_category = new javax.swing.JLabel();
        cmb_book_author = new javax.swing.JComboBox<>();
        lbl_book_printers = new javax.swing.JLabel();
        btn_book_save = new javax.swing.JButton();
        spn_book_count = new javax.swing.JSpinner();
        cmb_book_printers = new javax.swing.JComboBox<>();
        cmb_book_category = new javax.swing.JComboBox<>();
        btn_book_clear = new javax.swing.JButton();
        p_user = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tb_user = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        tf_user_address = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tf_user_lname = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tf_user_mobile = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cmb_user_upt = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cmb_user_country = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        tf_user_fname = new javax.swing.JTextField();
        lbl_user_uname = new javax.swing.JLabel();
        tf_user_uname = new javax.swing.JTextField();
        lbl_user_pw = new javax.swing.JLabel();
        cmb_user_userrole = new javax.swing.JComboBox<>();
        lbl_user_userrole = new javax.swing.JLabel();
        pf_user_pw = new javax.swing.JPasswordField();
        btn_user_clear = new javax.swing.JButton();
        btn_user_save = new javax.swing.JButton();
        p_type = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tf_book_author = new javax.swing.JTextField();
        btn_ba_save = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_ba = new javax.swing.JTable();
        tf_book_category = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btn_bc_save = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_bc = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        tf_book_printer = new javax.swing.JTextField();
        btn_bp_save = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_bp = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1366, 768));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setName("fr_main"); // NOI18N
        setResizable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${defaultCloseOperation}"), this, org.jdesktop.beansbinding.BeanProperty.create("defaultCloseOperation"));
        bindingGroup.addBinding(binding);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setMaximumSize(new java.awt.Dimension(1366, 768));
        jPanel1.setMinimumSize(new java.awt.Dimension(1366, 768));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Handwriting", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Library Management System");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 480, 70));

        lbl_userrole.setBackground(new java.awt.Color(255, 255, 255));
        lbl_userrole.setForeground(new java.awt.Color(255, 255, 255));
        lbl_userrole.setText("System Admin");
        jPanel1.add(lbl_userrole, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 120, 30));

        lbl_userdisplayname.setBackground(new java.awt.Color(255, 255, 255));
        lbl_userdisplayname.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lbl_userdisplayname.setForeground(new java.awt.Color(255, 255, 255));
        lbl_userdisplayname.setText("Lahiru Kahawatta");
        jPanel1.add(lbl_userdisplayname, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 200, 40));

        lbl_system_date.setBackground(new java.awt.Color(255, 255, 255));
        lbl_system_date.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_system_date.setForeground(new java.awt.Color(255, 255, 255));
        lbl_system_date.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_system_date.setText("01 September 2019");
        jPanel1.add(lbl_system_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 20, 190, 30));

        lbl_system_time.setBackground(new java.awt.Color(255, 255, 255));
        lbl_system_time.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lbl_system_time.setForeground(new java.awt.Color(255, 255, 255));
        lbl_system_time.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_system_time.setText("12:22:48 AM");
        jPanel1.add(lbl_system_time, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 50, 150, 30));

        btn_type.setBackground(new java.awt.Color(0, 204, 204));
        btn_type.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_type.setForeground(new java.awt.Color(51, 51, 51));
        btn_type.setText("Type Management");
        btn_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_typeActionPerformed(evt);
            }
        });
        jPanel1.add(btn_type, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 170, 200, -1));

        btn_user.setBackground(new java.awt.Color(0, 204, 204));
        btn_user.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_user.setForeground(new java.awt.Color(51, 51, 51));
        btn_user.setText("User Management");
        btn_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_userActionPerformed(evt);
            }
        });
        jPanel1.add(btn_user, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 170, 200, -1));

        btn_book.setBackground(new java.awt.Color(0, 204, 204));
        btn_book.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_book.setForeground(new java.awt.Color(51, 51, 51));
        btn_book.setText("Book Management");
        btn_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bookActionPerformed(evt);
            }
        });
        jPanel1.add(btn_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 170, 200, -1));

        btn_home.setBackground(new java.awt.Color(0, 204, 204));
        btn_home.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_home.setForeground(new java.awt.Color(51, 51, 51));
        btn_home.setText("Home");
        btn_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_homeActionPerformed(evt);
            }
        });
        jPanel1.add(btn_home, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 200, -1));

        btn_user_logout.setBackground(new java.awt.Color(255, 51, 51));
        btn_user_logout.setForeground(new java.awt.Color(51, 51, 51));
        btn_user_logout.setText("Logout");
        btn_user_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_user_logoutActionPerformed(evt);
            }
        });
        jPanel1.add(btn_user_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 90, 80, 30));

        p_main.setBackground(new java.awt.Color(51, 51, 51));
        p_main.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        p_main.setMaximumSize(new java.awt.Dimension(1266, 500));
        p_main.setMinimumSize(new java.awt.Dimension(1266, 500));
        p_main.setName(""); // NOI18N
        p_main.setPreferredSize(new java.awt.Dimension(1266, 500));
        p_main.setLayout(new java.awt.CardLayout());

        p_home.setBackground(new java.awt.Color(51, 51, 51));
        p_home.setMaximumSize(new java.awt.Dimension(1266, 500));
        p_home.setMinimumSize(new java.awt.Dimension(1266, 500));
        p_home.setPreferredSize(new java.awt.Dimension(1266, 500));
        p_home.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_home_systemdate.setFont(new java.awt.Font("Dialog", 1, 28)); // NOI18N
        lbl_home_systemdate.setForeground(new java.awt.Color(204, 204, 204));
        lbl_home_systemdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_home_systemdate.setText("02 September 2019, Tuesday");
        p_home.add(lbl_home_systemdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 260, 560, -1));

        lbl_home_systemtime.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        lbl_home_systemtime.setForeground(new java.awt.Color(255, 255, 255));
        lbl_home_systemtime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_home_systemtime.setText("12:22:48 AM");
        p_home.add(lbl_home_systemtime, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, 500, 70));

        p_main.add(p_home, "card2");

        p_book.setBackground(new java.awt.Color(51, 51, 51));
        p_book.setMaximumSize(new java.awt.Dimension(1266, 500));
        p_book.setMinimumSize(new java.awt.Dimension(1266, 500));
        p_book.setPreferredSize(new java.awt.Dimension(1266, 500));
        p_book.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tb_book.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "ISBN", "YEAR", "AUTHOR", "CATEGORY", "PRINTERS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_book.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_bookMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tb_book);
        if (tb_book.getColumnModel().getColumnCount() > 0) {
            tb_book.getColumnModel().getColumn(0).setResizable(false);
            tb_book.getColumnModel().getColumn(0).setPreferredWidth(10);
            tb_book.getColumnModel().getColumn(1).setResizable(false);
            tb_book.getColumnModel().getColumn(1).setPreferredWidth(20);
            tb_book.getColumnModel().getColumn(2).setResizable(false);
            tb_book.getColumnModel().getColumn(2).setPreferredWidth(10);
            tb_book.getColumnModel().getColumn(3).setResizable(false);
            tb_book.getColumnModel().getColumn(3).setPreferredWidth(10);
            tb_book.getColumnModel().getColumn(4).setResizable(false);
            tb_book.getColumnModel().getColumn(4).setPreferredWidth(20);
            tb_book.getColumnModel().getColumn(5).setResizable(false);
            tb_book.getColumnModel().getColumn(5).setPreferredWidth(10);
            tb_book.getColumnModel().getColumn(6).setResizable(false);
            tb_book.getColumnModel().getColumn(6).setPreferredWidth(20);
        }

        p_book.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 1150, 210));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Create / Update Book");
        p_book.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 180, -1));
        p_book.add(tf_book_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 1150, -1));

        jLabel13.setForeground(new java.awt.Color(204, 204, 204));
        jLabel13.setText("Description");
        p_book.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 230, -1));
        p_book.add(tf_book_isbn, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, 240, -1));

        jLabel14.setForeground(new java.awt.Color(204, 204, 204));
        jLabel14.setText("ISBN Number");
        p_book.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, 240, -1));

        jLabel15.setForeground(new java.awt.Color(204, 204, 204));
        jLabel15.setText("Book Count");
        p_book.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 60, 240, -1));
        p_book.add(tf_book_printed_year, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 80, 250, -1));

        jLabel16.setForeground(new java.awt.Color(204, 204, 204));
        jLabel16.setText("Printed Year");
        p_book.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 250, -1));

        jLabel17.setForeground(new java.awt.Color(204, 204, 204));
        jLabel17.setText("Book Name");
        p_book.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 230, -1));
        p_book.add(tf_book_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 230, -1));

        lbl_book_author.setForeground(new java.awt.Color(204, 204, 204));
        lbl_book_author.setText("Book Author");
        p_book.add(lbl_book_author, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 230, -1));

        lbl_book_category.setForeground(new java.awt.Color(204, 204, 204));
        lbl_book_category.setText("Book Category");
        p_book.add(lbl_book_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 180, 230, -1));

        cmb_book_author.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        p_book.add(cmb_book_author, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 230, -1));

        lbl_book_printers.setForeground(new java.awt.Color(204, 204, 204));
        lbl_book_printers.setText("Book Printers");
        p_book.add(lbl_book_printers, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 250, -1));

        btn_book_save.setBackground(new java.awt.Color(0, 204, 204));
        btn_book_save.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_book_save.setForeground(new java.awt.Color(51, 51, 51));
        btn_book_save.setText("CREATE / UPDATE");
        btn_book_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_book_saveActionPerformed(evt);
            }
        });
        p_book.add(btn_book_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 195, 160, 40));
        p_book.add(spn_book_count, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 80, 240, -1));

        cmb_book_printers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        p_book.add(cmb_book_printers, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 200, 250, -1));

        cmb_book_category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        p_book.add(cmb_book_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 200, 240, -1));

        btn_book_clear.setBackground(new java.awt.Color(0, 204, 204));
        btn_book_clear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_book_clear.setForeground(new java.awt.Color(51, 51, 51));
        btn_book_clear.setText("X");
        btn_book_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_book_clearActionPerformed(evt);
            }
        });
        p_book.add(btn_book_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 195, 50, 40));

        p_main.add(p_book, "card2");

        p_user.setBackground(new java.awt.Color(51, 51, 51));
        p_user.setMaximumSize(new java.awt.Dimension(1266, 500));
        p_user.setMinimumSize(new java.awt.Dimension(1266, 500));
        p_user.setPreferredSize(new java.awt.Dimension(1266, 500));
        p_user.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tb_user.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "MOBILE", "ADDRESS", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_user.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_userMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tb_user);
        if (tb_user.getColumnModel().getColumnCount() > 0) {
            tb_user.getColumnModel().getColumn(0).setResizable(false);
            tb_user.getColumnModel().getColumn(0).setPreferredWidth(10);
            tb_user.getColumnModel().getColumn(1).setResizable(false);
            tb_user.getColumnModel().getColumn(1).setPreferredWidth(20);
            tb_user.getColumnModel().getColumn(2).setResizable(false);
            tb_user.getColumnModel().getColumn(2).setPreferredWidth(10);
            tb_user.getColumnModel().getColumn(3).setResizable(false);
            tb_user.getColumnModel().getColumn(3).setPreferredWidth(10);
            tb_user.getColumnModel().getColumn(4).setResizable(false);
            tb_user.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        p_user.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 1150, 210));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Create / Update User");
        p_user.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 180, -1));
        p_user.add(tf_user_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 840, -1));

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Address");
        p_user.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 230, -1));
        p_user.add(tf_user_lname, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, 240, -1));

        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText("Last Name");
        p_user.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, 240, -1));

        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("User Profile Type");
        p_user.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 60, 240, -1));
        p_user.add(tf_user_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 80, 250, -1));

        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setText("Mobile");
        p_user.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 250, -1));

        cmb_user_upt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        p_user.add(cmb_user_upt, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 80, 240, -1));

        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("First Name");
        p_user.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 230, -1));

        cmb_user_country.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        p_user.add(cmb_user_country, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 140, 240, -1));

        jLabel11.setForeground(new java.awt.Color(204, 204, 204));
        jLabel11.setText("Country");
        p_user.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 120, 240, -1));
        p_user.add(tf_user_fname, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 230, -1));

        lbl_user_uname.setForeground(new java.awt.Color(204, 204, 204));
        lbl_user_uname.setText("Username");
        p_user.add(lbl_user_uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 230, -1));
        p_user.add(tf_user_uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 230, -1));

        lbl_user_pw.setForeground(new java.awt.Color(204, 204, 204));
        lbl_user_pw.setText("Password");
        p_user.add(lbl_user_pw, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 180, 230, -1));

        cmb_user_userrole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        p_user.add(cmb_user_userrole, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 200, 250, -1));

        lbl_user_userrole.setForeground(new java.awt.Color(204, 204, 204));
        lbl_user_userrole.setText("User Role");
        p_user.add(lbl_user_userrole, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 250, -1));

        pf_user_pw.setMinimumSize(new java.awt.Dimension(14, 24));
        pf_user_pw.setPreferredSize(new java.awt.Dimension(14, 24));
        p_user.add(pf_user_pw, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 200, 240, -1));

        btn_user_clear.setBackground(new java.awt.Color(0, 204, 204));
        btn_user_clear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_user_clear.setForeground(new java.awt.Color(51, 51, 51));
        btn_user_clear.setText("X");
        btn_user_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_user_clearActionPerformed(evt);
            }
        });
        p_user.add(btn_user_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 195, 50, 40));

        btn_user_save.setBackground(new java.awt.Color(0, 204, 204));
        btn_user_save.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_user_save.setForeground(new java.awt.Color(51, 51, 51));
        btn_user_save.setText("CREATE / UPDATE");
        btn_user_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_user_saveActionPerformed(evt);
            }
        });
        p_user.add(btn_user_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 195, 170, 40));

        p_main.add(p_user, "card2");

        p_type.setBackground(new java.awt.Color(51, 51, 51));
        p_type.setMaximumSize(new java.awt.Dimension(1266, 500));
        p_type.setMinimumSize(new java.awt.Dimension(1266, 500));
        p_type.setPreferredSize(new java.awt.Dimension(1266, 500));
        p_type.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Book author");
        p_type.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 120, -1));

        tf_book_author.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_book_authorActionPerformed(evt);
            }
        });
        p_type.add(tf_book_author, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 200, -1));

        btn_ba_save.setBackground(new java.awt.Color(0, 204, 204));
        btn_ba_save.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_ba_save.setForeground(new java.awt.Color(51, 51, 51));
        btn_ba_save.setText("SAVE");
        btn_ba_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ba_saveActionPerformed(evt);
            }
        });
        p_type.add(btn_ba_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, -1, 30));

        tb_ba.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_ba.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_baMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_ba);
        if (tb_ba.getColumnModel().getColumnCount() > 0) {
            tb_ba.getColumnModel().getColumn(0).setResizable(false);
            tb_ba.getColumnModel().getColumn(0).setPreferredWidth(10);
            tb_ba.getColumnModel().getColumn(1).setResizable(false);
            tb_ba.getColumnModel().getColumn(1).setPreferredWidth(90);
        }

        p_type.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 300, 340));

        tf_book_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_book_categoryActionPerformed(evt);
            }
        });
        p_type.add(tf_book_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, 200, -1));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Book category");
        p_type.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 120, -1));

        btn_bc_save.setBackground(new java.awt.Color(0, 204, 204));
        btn_bc_save.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_bc_save.setForeground(new java.awt.Color(51, 51, 51));
        btn_bc_save.setText("SAVE");
        btn_bc_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bc_saveActionPerformed(evt);
            }
        });
        p_type.add(btn_bc_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 70, -1, 30));

        tb_bc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_bc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_bcMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tb_bc);
        if (tb_bc.getColumnModel().getColumnCount() > 0) {
            tb_bc.getColumnModel().getColumn(0).setResizable(false);
            tb_bc.getColumnModel().getColumn(0).setPreferredWidth(10);
            tb_bc.getColumnModel().getColumn(1).setResizable(false);
            tb_bc.getColumnModel().getColumn(1).setPreferredWidth(90);
        }

        p_type.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, 300, 340));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Book printer");
        p_type.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 30, 120, -1));

        tf_book_printer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_book_printerActionPerformed(evt);
            }
        });
        p_type.add(tf_book_printer, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 70, 200, -1));

        btn_bp_save.setBackground(new java.awt.Color(0, 204, 204));
        btn_bp_save.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_bp_save.setForeground(new java.awt.Color(51, 51, 51));
        btn_bp_save.setText("SAVE");
        btn_bp_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bp_saveActionPerformed(evt);
            }
        });
        p_type.add(btn_bp_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 70, -1, 30));

        tb_bp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_bp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_bpMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tb_bp);
        if (tb_bp.getColumnModel().getColumnCount() > 0) {
            tb_bp.getColumnModel().getColumn(0).setResizable(false);
            tb_bp.getColumnModel().getColumn(0).setPreferredWidth(10);
            tb_bp.getColumnModel().getColumn(1).setResizable(false);
            tb_bp.getColumnModel().getColumn(1).setPreferredWidth(90);
        }

        p_type.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 120, 300, 340));

        p_main.add(p_type, "card2");

        jPanel1.add(p_main, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, 1266, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1366, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_homeActionPerformed
        loadPanel(p_main, p_home);
    }//GEN-LAST:event_btn_homeActionPerformed

    private void btn_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bookActionPerformed
        loadPanel(p_main, p_book);
    }//GEN-LAST:event_btn_bookActionPerformed

    private void btn_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_userActionPerformed
        loadPanel(p_main, p_user);
    }//GEN-LAST:event_btn_userActionPerformed

    private void btn_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_typeActionPerformed
        loadPanel(p_main, p_type);
    }//GEN-LAST:event_btn_typeActionPerformed

    private void tf_book_authorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_book_authorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_book_authorActionPerformed

    private void btn_ba_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ba_saveActionPerformed
        try {
            String name = URLEncoder.encode(tf_book_author.getText(), "UTF-8");

            String URL = ResAccessUrl.BOOK_SERVICE + "BookAuthor/" + name;
            String METHOD = "POST";
            String res = new ResAccessMethod().callMethod(URL, METHOD);

            if (res.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Save failed");
            } else {
                JSONObject obj2 = new JSONObject(res);
                if (obj2.getBoolean("result")) {
                    JOptionPane.showMessageDialog(null, "Successfully saved");
                    tf_book_author.setText("");
                    loadTable();
                    loadCombo();
                } else {
                    JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_btn_ba_saveActionPerformed

    private void tf_book_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_book_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_book_categoryActionPerformed

    private void btn_bc_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bc_saveActionPerformed
        try {
            String name = URLEncoder.encode(tf_book_category.getText(), "UTF-8");

            String URL = ResAccessUrl.BOOK_SERVICE + "BookCategory/" + name;
            String METHOD = "POST";
            String res = new ResAccessMethod().callMethod(URL, METHOD);

            if (res.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Save failed");
            } else {
                JSONObject obj2 = new JSONObject(res);
                if (obj2.getBoolean("result")) {
                    JOptionPane.showMessageDialog(null, "Successfully saved");
                    tf_book_category.setText("");
                    loadTable();
                    loadCombo();
                } else {
                    JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_btn_bc_saveActionPerformed

    private void tf_book_printerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_book_printerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_book_printerActionPerformed

    private void btn_bp_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bp_saveActionPerformed
        try {
            String name = URLEncoder.encode(tf_book_printer.getText(), "UTF-8");

            String URL = ResAccessUrl.BOOK_SERVICE + "BookPrinter/" + name;
            String METHOD = "POST";
            String res = new ResAccessMethod().callMethod(URL, METHOD);

            if (res.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Save failed");
            } else {
                JSONObject obj2 = new JSONObject(res);
                if (obj2.getBoolean("result")) {
                    JOptionPane.showMessageDialog(null, "Successfully saved");
                    tf_book_printer.setText("");
                    loadTable();
                    loadCombo();
                } else {
                    JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_btn_bp_saveActionPerformed

    private void tb_baMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_baMouseClicked
        try {
            if (evt.getClickCount() == 2 && tb_ba.getSelectedRow() != -1) {
                int id = Integer.parseInt(tb_ba.getModel().getValueAt(tb_ba.getSelectedRow(), 0).toString());
                String name = tb_ba.getModel().getValueAt(tb_ba.getSelectedRow(), 1).toString();
                int input = JOptionPane.showConfirmDialog(null, "Are sure to delete " + name + " ?");
                if (input == 0) {
                    String URL = ResAccessUrl.BOOK_SERVICE + "BookAuthor/" + id;
                    String METHOD = "DELETE";
                    String res = new ResAccessMethod().callMethod(URL, METHOD);

                    if (res.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Delete failed");
                    } else {
                        JSONObject obj2 = new JSONObject(res);
                        if (obj2.getBoolean("result")) {
                            JOptionPane.showMessageDialog(null, "Successfully deleted");
                            ((DefaultTableModel) tb_ba.getModel()).removeRow(tb_ba.getSelectedRow());
                        } else {
                            JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                        }

                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }

    }//GEN-LAST:event_tb_baMouseClicked

    private void tb_bcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_bcMouseClicked
        try {
            if (evt.getClickCount() == 2 && tb_bc.getSelectedRow() != -1) {
                int id = Integer.parseInt(tb_bc.getModel().getValueAt(tb_bc.getSelectedRow(), 0).toString());
                String name = tb_bc.getModel().getValueAt(tb_bc.getSelectedRow(), 1).toString();
                int input = JOptionPane.showConfirmDialog(null, "Are sure to delete " + name + " ?");
                if (input == 0) {
                    String URL = ResAccessUrl.BOOK_SERVICE + "BookCategory/" + id;
                    String METHOD = "DELETE";
                    String res = new ResAccessMethod().callMethod(URL, METHOD);

                    if (res.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Delete failed");
                    } else {
                        JSONObject obj2 = new JSONObject(res);
                        if (obj2.getBoolean("result")) {
                            JOptionPane.showMessageDialog(null, "Successfully deleted");
                            ((DefaultTableModel) tb_bc.getModel()).removeRow(tb_bc.getSelectedRow());
                        } else {
                            JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                        }

                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_tb_bcMouseClicked

    private void tb_bpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_bpMouseClicked
        try {
            if (evt.getClickCount() == 2 && tb_bp.getSelectedRow() != -1) {
                int id = Integer.parseInt(tb_bp.getModel().getValueAt(tb_bp.getSelectedRow(), 0).toString());
                String name = tb_bp.getModel().getValueAt(tb_bp.getSelectedRow(), 1).toString();
                int input = JOptionPane.showConfirmDialog(null, "Are sure to delete " + name + " ?");
                if (input == 0) {
                    String URL = ResAccessUrl.BOOK_SERVICE + "BookPrinter/" + id;
                    String METHOD = "DELETE";
                    String res = new ResAccessMethod().callMethod(URL, METHOD);

                    if (res.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Delete failed");
                    } else {
                        JSONObject obj2 = new JSONObject(res);
                        if (obj2.getBoolean("result")) {
                            JOptionPane.showMessageDialog(null, "Successfully deleted");
                            ((DefaultTableModel) tb_bp.getModel()).removeRow(tb_bp.getSelectedRow());
                        } else {
                            JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                        }

                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_tb_bpMouseClicked

    private void btn_user_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_user_saveActionPerformed
        try {
            if (this.userID != 0) {
                //Update
                String fname = URLEncoder.encode(tf_user_fname.getText(), "UTF-8");
                String lname = URLEncoder.encode(tf_user_lname.getText(), "UTF-8");
                String mobile = URLEncoder.encode(tf_user_mobile.getText(), "UTF-8");
                String address = URLEncoder.encode(tf_user_address.getText(), "UTF-8");
                String userProfileType = cmb_user_upt.getSelectedItem().toString().split("-")[1];
                String country = cmb_user_country.getSelectedItem().toString().split("-")[1];
                int lhid = this.obj.getInt("id");

                String URL = ResAccessUrl.USER_SERVICE + "UserProfile/" + this.userID + "/" + fname + "/" + lname + "/" + mobile + "/" + address + "/" + userProfileType + "/" + country + "/" + lhid;
                String METHOD = "PUT";
                String res = new ResAccessMethod().callMethod(URL, METHOD);

                if (res.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "User update failed");
                } else {
                    JSONObject obj2 = new JSONObject(res);
                    if (obj2.getBoolean("result")) {
                        JOptionPane.showMessageDialog(null, "Successfully updated");
                        clearUserData();
                    } else {
                        JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                    }

                }
            } else {
                //Save
                String fname = URLEncoder.encode(tf_user_fname.getText(), "UTF-8");
                String lname = URLEncoder.encode(tf_user_lname.getText(), "UTF-8");
                String mobile = URLEncoder.encode(tf_user_mobile.getText(), "UTF-8");
                String address = URLEncoder.encode(tf_user_address.getText(), "UTF-8");
                String uname = tf_user_uname.getText();
                String pw = pf_user_pw.getText();
                String userRole = cmb_user_userrole.getSelectedItem().toString().split("-")[1];
                String userProfileType = cmb_user_upt.getSelectedItem().toString().split("-")[1];
                String country = cmb_user_country.getSelectedItem().toString().split("-")[1];
                int lhid = this.obj.getInt("id");

                String URL = ResAccessUrl.USER_SERVICE + "UserProfile/" + fname + "/" + lname + "/" + mobile + "/" + address + "/" + userProfileType + "/" + country + "/" + lhid + "/" + uname + "/" + pw + "/" + userRole;
                String METHOD = "POST";
                String res = new ResAccessMethod().callMethod(URL, METHOD);

                if (res.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Registration failed");
                } else {
                    JSONObject obj2 = new JSONObject(res);
                    if (obj2.getBoolean("result")) {
                        JOptionPane.showMessageDialog(null, "Successfully registered");
                        clearUserData();
                    } else {
                        JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                    }

                }
            }
            loadTable();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_btn_user_saveActionPerformed

    private void btn_book_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_book_saveActionPerformed
        try {
            String name = URLEncoder.encode(tf_book_name.getText(), "UTF-8");
            String isbn = URLEncoder.encode(tf_book_isbn.getText(), "UTF-8");
            String description = URLEncoder.encode(tf_book_description.getText(), "UTF-8");
            int printedYear = Integer.parseInt(tf_book_printed_year.getText());
            int bookCount = (Integer) spn_book_count.getValue();
            String author = cmb_book_author.getSelectedItem().toString().split("-")[1];
            String category = cmb_book_category.getSelectedItem().toString().split("-")[1];
            String printers = cmb_book_printers.getSelectedItem().toString().split("-")[1];
            int lhid = obj.getInt("id");

            if (this.bookID != 0) {
                //Update
                String URL = ResAccessUrl.BOOK_SERVICE + "BookProfile/" + lhid + "/"+this.bookID+"/" + name + "/" + isbn + "/" + description+"/"+bookCount+"/"+printedYear+"/"+author+"/"+category+"/"+printers;
                String METHOD = "PUT";
                String res = new ResAccessMethod().callMethod(URL, METHOD);
                
                if (res.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "New book update failed");
                } else {
                    JSONObject obj2 = new JSONObject(res);
                    if (obj2.getBoolean("result")) {
                        JOptionPane.showMessageDialog(null, "Successfully updated");
                        clearBookData();
                    } else {
                        JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                    }

                }
            } else {
                //Save

                String URL = ResAccessUrl.BOOK_SERVICE + "BookProfile/" + lhid + "/" + name + "/" + isbn + "/" + description + "/" + bookCount + "/" + printedYear + "/" + author + "/" + category + "/" + printers;
                String METHOD = "POST";
                String res = new ResAccessMethod().callMethod(URL, METHOD);

                if (res.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "New book save failed");
                } else {
                    JSONObject obj2 = new JSONObject(res);
                    if (obj2.getBoolean("result")) {
                        JOptionPane.showMessageDialog(null, "Successfully saved");
                        clearBookData();
                    } else {
                        JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                    }

                }
            }
            
            loadTable();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_btn_book_saveActionPerformed

    private void tb_bookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_bookMouseClicked
        try {
            if (evt.getButton()==MouseEvent.BUTTON3 && tb_book.getSelectedRow() != -1) {
                int id = Integer.parseInt(tb_book.getModel().getValueAt(tb_book.getSelectedRow(), 0).toString());
                String name = tb_book.getModel().getValueAt(tb_book.getSelectedRow(), 1).toString();
                int input = JOptionPane.showConfirmDialog(null, "Are sure to edit book : " + name + " ?");
                if (input == 0) {
                    this.bookID = id;

                    String URL = ResAccessUrl.BOOK_SERVICE + "BookProfile/" + id;
                    String METHOD = "GET";
                    String res = new ResAccessMethod().callMethod(URL, METHOD);

                    String genID = "";
                    String bookName = "";
                    String isbn = "";
                    String description = "";
                    int printedYear = 0;
                    int bookCount = 0;
                    String author = "";
                    String category = "";
                    String printers = "";
                    int bookAuthor = 0;
                    int bookCategory = 0;
                    int bookPrinters = 0;

                    if (!res.isEmpty()) {
                        JSONObject objRec = new JSONObject(res);
                        if (objRec.getBoolean("result")) {
                            genID = objRec.getString("genID");
                            bookName = objRec.getString("name");
                            isbn = objRec.getString("isbn");
                            description = objRec.getString("description");
                            printedYear = objRec.getInt("printedYear");
                            bookCount = objRec.getInt("bookCount");
                            author = objRec.getString("author");
                            category = objRec.getString("category");
                            printers = objRec.getString("printers");
                            bookAuthor = objRec.getInt("authorId");
                            bookCategory = objRec.getInt("categoryId");
                            bookPrinters = objRec.getInt("printersId");

                            tf_book_name.setText(bookName);
                            tf_book_isbn.setText(isbn);
                            tf_book_description.setText(description);
                            tf_book_printed_year.setText(printedYear + "");
                            spn_book_count.setValue(bookCount);

                            cmb_book_author.setSelectedItem(author + "-" + bookAuthor);
                            cmb_book_category.setSelectedItem(category + "-" + bookCategory);
                            cmb_book_printers.setSelectedItem(printers + "-" + bookPrinters);
                        }
                    }
                }
            } else if (evt.getClickCount() == 2 && tb_book.getSelectedRow() != -1) {
                int id = Integer.parseInt(tb_book.getModel().getValueAt(tb_book.getSelectedRow(), 0).toString());
                String name = tb_book.getModel().getValueAt(tb_book.getSelectedRow(), 1).toString();
                int input = JOptionPane.showConfirmDialog(null, "Are sure to delete " + name + " ?");
                if (input == 0) {
                    String URL = ResAccessUrl.BOOK_SERVICE + "BookProfile/" + id;
                    String METHOD = "DELETE";
                    String res = new ResAccessMethod().callMethod(URL, METHOD);

                    if (res.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Delete failed");
                    } else {
                        JSONObject obj2 = new JSONObject(res);
                        if (obj2.getBoolean("result")) {
                            JOptionPane.showMessageDialog(null, "Successfully deleted");
                            ((DefaultTableModel) tb_book.getModel()).removeRow(tb_book.getSelectedRow());
                        } else {
                            JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                        }

                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_tb_bookMouseClicked

    private void tb_userMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_userMouseClicked
        try {
            if (evt.getButton()==MouseEvent.BUTTON3 && tb_user.getSelectedRow() != -1) {
                int id = Integer.parseInt(tb_user.getModel().getValueAt(tb_user.getSelectedRow(), 0).toString());
                String name = tb_user.getModel().getValueAt(tb_user.getSelectedRow(), 1).toString();
                int input = JOptionPane.showConfirmDialog(null, "Are sure to edit user : " + name + " ?");
                if (input == 0) {
                    this.userID = id;
                    lbl_user_pw.setVisible(Boolean.FALSE);
                    lbl_user_uname.setVisible(Boolean.FALSE);
                    lbl_user_userrole.setVisible(Boolean.FALSE);
                    tf_user_uname.setVisible(Boolean.FALSE);
                    pf_user_pw.setVisible(Boolean.FALSE);
                    cmb_user_userrole.setVisible(Boolean.FALSE);

                    String URL = ResAccessUrl.USER_SERVICE + "UserProfile/" + id;
                    String METHOD = "GET";
                    String res = new ResAccessMethod().callMethod(URL, METHOD);

                    String genID = "";
                    String fname = "";
                    String lname = "";
                    String mobile = "";
                    String address = "";
                    String userProfileType = "";
                    int userProfileTypeId = 0;
                    int countryId = 0;
                    String country = "";
                    int userRoleId = 0;

                    if (!res.isEmpty()) {
                        JSONObject objRec = new JSONObject(res);
                        if (objRec.getBoolean("result")) {
                            genID = objRec.getString("genID");
                            fname = objRec.getString("fname");
                            lname = objRec.getString("lname");
                            mobile = objRec.getString("mobile");
                            address = objRec.getString("address");
                            userProfileType = objRec.getString("userProfileType");
                            userProfileTypeId = objRec.getInt("userProfileTypeId");
                            countryId = objRec.getInt("countryId");
                            country = objRec.getString("country");
                            userRoleId = objRec.getInt("userRoleId");

                            tf_user_fname.setText(fname);
                            tf_user_lname.setText(lname);
                            tf_user_mobile.setText(mobile);
                            tf_user_address.setText(address);
                            cmb_user_upt.setSelectedItem(userProfileType + "-" + userProfileTypeId);
                            cmb_user_country.setSelectedItem(country + "-" + countryId);
                        }
                    }
                }
            } else if (evt.getClickCount() == 2 && tb_user.getSelectedRow() != -1) {
                int id = Integer.parseInt(tb_user.getModel().getValueAt(tb_user.getSelectedRow(), 0).toString());
                String name = tb_user.getModel().getValueAt(tb_user.getSelectedRow(), 1).toString();
                int input = JOptionPane.showConfirmDialog(null, "Are sure to delete " + name + " ?");
                if (input == 0) {
                    String URL = ResAccessUrl.USER_SERVICE + "UserProfile/" + id;
                    String METHOD = "DELETE";
                    String res = new ResAccessMethod().callMethod(URL, METHOD);

                    if (res.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Delete failed");
                    } else {
                        JSONObject obj2 = new JSONObject(res);
                        if (obj2.getBoolean("result")) {
                            JOptionPane.showMessageDialog(null, "Successfully deleted");
                            ((DefaultTableModel) tb_user.getModel()).removeRow(tb_user.getSelectedRow());
                        } else {
                            JOptionPane.showMessageDialog(null, obj2.getString("msg"));
                        }

                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_tb_userMouseClicked

    private void btn_user_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_user_clearActionPerformed
        clearUserData();
    }//GEN-LAST:event_btn_user_clearActionPerformed

    private void btn_book_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_book_clearActionPerformed
        clearBookData();
    }//GEN-LAST:event_btn_book_clearActionPerformed

    private void btn_user_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_user_logoutActionPerformed
        try {
            int input = JOptionPane.showConfirmDialog(null, "Hai " + this.obj.getString("username") + ", Do you want to sign out ?");
            if(input==0){
                String URL = ResAccessUrl.USER_SERVICE + "UserLogOut/" + this.obj.getInt("id");
                String METHOD = "PUT";
                String res = new ResAccessMethod().callMethod(URL, METHOD);
                new LoginAPP().setVisible(true);
                this.dispose();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went to wrong");
        }
    }//GEN-LAST:event_btn_user_logoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainAPP().setVisible(true);
            }
        });
    }

    private void initializedData() {
        try {
            Toolkit tool = Toolkit.getDefaultToolkit();
            Dimension dim = new Dimension(tool.getScreenSize());
            int height = (int) dim.getHeight();
            int width = (int) dim.getWidth();
            setSize(width, height);
            setLocation(width / 2 - getWidth() / 2, height / 2 - getHeight() / 2);

            lbl_userdisplayname.setText(obj.getString("username"));
            lbl_userrole.setText(obj.getString("userRole"));

            setSystemDate();

            loadPanel(p_main, p_home);
            loadCombo();
            loadTable();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setSystemDate() {
        new Timer(100, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Date date = new Date();
                SimpleDateFormat sdfDTE = new SimpleDateFormat("dd MMM YYYY, EEEE");
                lbl_system_date.setText(sdfDTE.format(date));
                lbl_home_systemdate.setText(sdfDTE.format(date));
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss a");
                lbl_system_time.setText(sdf.format(date));
                lbl_home_systemtime.setText(sdf.format(date));
                System.gc();
            }
        }).start();
    }

    private void loadPanel(JPanel p_main, JPanel p_sub) {
        p_main.removeAll();
        p_main.repaint();
        p_main.revalidate();
        p_main.add(p_sub);
        p_main.repaint();
        p_main.revalidate();
    }

    private void loadCombo() throws Exception {
        JSONArray arrRec;

        String URLBA = ResAccessUrl.BOOK_SERVICE + "BookAuthors";
        String METHODBA = "GET";
        String resBA = new ResAccessMethod().callMethod(URLBA, METHODBA);
        arrRec = new JSONArray(resBA);
        cmb_book_author.removeAllItems();
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            cmb_book_author.addItem(objRec.getString("name") + "-" + objRec.getInt("id"));
        }

        String URLBPR = ResAccessUrl.BOOK_SERVICE + "BookPrinters";
        String METHODBPR = "GET";
        String resBPR = new ResAccessMethod().callMethod(URLBPR, METHODBPR);
        arrRec = new JSONArray(resBPR);
        cmb_book_printers.removeAllItems();
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            cmb_book_printers.addItem(objRec.getString("name") + "-" + objRec.getInt("id"));
        }

        String URLBC = ResAccessUrl.BOOK_SERVICE + "BookCategories";
        String METHODBC = "GET";
        String resBC = new ResAccessMethod().callMethod(URLBC, METHODBC);
        arrRec = new JSONArray(resBC);
        cmb_book_category.removeAllItems();
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            cmb_book_category.addItem(objRec.getString("name") + "-" + objRec.getInt("id"));
        }

        String URLUR = ResAccessUrl.USER_SERVICE + "UserRoles";
        String METHODUR = "GET";
        String resUR = new ResAccessMethod().callMethod(URLUR, METHODUR);
        arrRec = new JSONArray(resUR);
        cmb_user_userrole.removeAllItems();
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            cmb_user_userrole.addItem(objRec.getString("name") + "-" + objRec.getInt("id"));
        }

        String URLUPT = ResAccessUrl.USER_SERVICE + "UserProfileTypes";
        String METHODUPT = "GET";
        String resUPT = new ResAccessMethod().callMethod(URLUPT, METHODUPT);
        arrRec = new JSONArray(resUPT);
        cmb_user_upt.removeAllItems();
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            cmb_user_upt.addItem(objRec.getString("name") + "-" + objRec.getInt("id"));
        }

        String URLC = ResAccessUrl.USER_SERVICE + "Countries";
        String METHODC = "GET";
        String resC = new ResAccessMethod().callMethod(URLC, METHODC);
        arrRec = new JSONArray(resC);
        cmb_user_country.removeAllItems();
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            cmb_user_country.addItem(objRec.getString("name") + "-" + objRec.getInt("id"));
        }
    }

    private void loadTable() throws Exception {
        JSONArray arrRec;
        DefaultTableModel dtm;

        String URLBP = ResAccessUrl.BOOK_SERVICE + "BookProfiles";
        String METHODBP = "GET";
        String resBP = new ResAccessMethod().callMethod(URLBP, METHODBP);
        dtm = (DefaultTableModel) tb_book.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();
        arrRec = new JSONArray(resBP);
        for (int i = 1; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            Vector v = new Vector();
            v.add("000" + objRec.getInt("id"));
            v.add(objRec.getString("name"));
            v.add(objRec.getString("isbn"));
            v.add(objRec.getInt("printedYear"));
            v.add(objRec.getString("author"));
            v.add(objRec.getString("category"));
            v.add(objRec.getString("printers"));
            dtm.addRow(v);
        }

        String URLUP = ResAccessUrl.USER_SERVICE + "UserProfiles";
        String METHODUP = "GET";
        String resUP = new ResAccessMethod().callMethod(URLUP, METHODUP);
        dtm = (DefaultTableModel) tb_user.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();
        arrRec = new JSONArray(resUP);
        for (int i = 1; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            Vector v = new Vector();
            v.add("000" + objRec.getInt("id"));
            v.add(objRec.getString("name"));
            v.add(objRec.getString("mobile"));
            v.add(objRec.getString("address"));
            if (objRec.getBoolean("isApproved")) {
                v.add("Active");
            } else {
                v.add("Inactive");
            }
            dtm.addRow(v);
        }

        String URLBA = ResAccessUrl.BOOK_SERVICE + "BookAuthors";
        String METHODBA = "GET";
        String resBA = new ResAccessMethod().callMethod(URLBA, METHODBA);
        dtm = (DefaultTableModel) tb_ba.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();
        arrRec = new JSONArray(resBA);
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            Vector v = new Vector();
            v.add("000" + objRec.getInt("id"));
            v.add(objRec.getString("name"));
            dtm.addRow(v);
        }

        String URLBPR = ResAccessUrl.BOOK_SERVICE + "BookPrinters";
        String METHODBPR = "GET";
        String resBPR = new ResAccessMethod().callMethod(URLBPR, METHODBPR);
        dtm = (DefaultTableModel) tb_bp.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();
        arrRec = new JSONArray(resBPR);
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            Vector v = new Vector();
            v.add("000" + objRec.getInt("id"));
            v.add(objRec.getString("name"));
            dtm.addRow(v);
        }

        String URLBC = ResAccessUrl.BOOK_SERVICE + "BookCategories";
        String METHODBC = "GET";
        String resBC = new ResAccessMethod().callMethod(URLBC, METHODBC);
        dtm = (DefaultTableModel) tb_bc.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();
        arrRec = new JSONArray(resBC);
        for (int i = 0; i < arrRec.length(); i++) {
            JSONObject objRec = arrRec.getJSONObject(i);
            Vector v = new Vector();
            v.add("000" + objRec.getInt("id"));
            v.add(objRec.getString("name"));
            dtm.addRow(v);
        }
    }

    private void clearUserData() {
        lbl_user_pw.setVisible(Boolean.TRUE);
        lbl_user_uname.setVisible(Boolean.TRUE);
        lbl_user_userrole.setVisible(Boolean.TRUE);
        tf_user_uname.setVisible(Boolean.TRUE);
        pf_user_pw.setVisible(Boolean.TRUE);
        cmb_user_userrole.setVisible(Boolean.TRUE);

        tf_user_fname.setText("");
        tf_user_lname.setText("");
        tf_user_mobile.setText("");
        tf_user_address.setText("");
        cmb_user_upt.setSelectedIndex(0);
        cmb_user_country.setSelectedIndex(0);

        tf_user_uname.setText("");
        pf_user_pw.setText("");
        cmb_user_userrole.setSelectedIndex(0);

        this.userID = 0;
    }

    private void clearBookData() {
        tf_book_name.setText("");
        tf_book_isbn.setText("");
        tf_book_printed_year.setText("");
        tf_book_description.setText("");
        spn_book_count.setValue(0);
        cmb_book_author.setSelectedIndex(0);
        cmb_book_category.setSelectedIndex(0);
        cmb_book_printers.setSelectedIndex(0);

        this.bookID = 0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ba_save;
    private javax.swing.JButton btn_bc_save;
    private javax.swing.JButton btn_book;
    private javax.swing.JButton btn_book_clear;
    private javax.swing.JButton btn_book_save;
    private javax.swing.JButton btn_bp_save;
    private javax.swing.JButton btn_home;
    private javax.swing.JButton btn_type;
    private javax.swing.JButton btn_user;
    private javax.swing.JButton btn_user_clear;
    private javax.swing.JButton btn_user_logout;
    private javax.swing.JButton btn_user_save;
    private javax.swing.JComboBox<String> cmb_book_author;
    private javax.swing.JComboBox<String> cmb_book_category;
    private javax.swing.JComboBox<String> cmb_book_printers;
    private javax.swing.JComboBox<String> cmb_user_country;
    private javax.swing.JComboBox<String> cmb_user_upt;
    private javax.swing.JComboBox<String> cmb_user_userrole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbl_book_author;
    private javax.swing.JLabel lbl_book_category;
    private javax.swing.JLabel lbl_book_printers;
    private javax.swing.JLabel lbl_home_systemdate;
    private javax.swing.JLabel lbl_home_systemtime;
    private javax.swing.JLabel lbl_system_date;
    private javax.swing.JLabel lbl_system_time;
    private javax.swing.JLabel lbl_user_pw;
    private javax.swing.JLabel lbl_user_uname;
    private javax.swing.JLabel lbl_user_userrole;
    private javax.swing.JLabel lbl_userdisplayname;
    private javax.swing.JLabel lbl_userrole;
    private javax.swing.JPanel p_book;
    private javax.swing.JPanel p_home;
    private javax.swing.JPanel p_main;
    private javax.swing.JPanel p_type;
    private javax.swing.JPanel p_user;
    private javax.swing.JPasswordField pf_user_pw;
    private javax.swing.JSpinner spn_book_count;
    private javax.swing.JTable tb_ba;
    private javax.swing.JTable tb_bc;
    private javax.swing.JTable tb_book;
    private javax.swing.JTable tb_bp;
    private javax.swing.JTable tb_user;
    private javax.swing.JTextField tf_book_author;
    private javax.swing.JTextField tf_book_category;
    private javax.swing.JTextField tf_book_description;
    private javax.swing.JTextField tf_book_isbn;
    private javax.swing.JTextField tf_book_name;
    private javax.swing.JTextField tf_book_printed_year;
    private javax.swing.JTextField tf_book_printer;
    private javax.swing.JTextField tf_user_address;
    private javax.swing.JTextField tf_user_fname;
    private javax.swing.JTextField tf_user_lname;
    private javax.swing.JTextField tf_user_mobile;
    private javax.swing.JTextField tf_user_uname;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
